openapi: '3.0.3'
info:
  title: Cards of Keyforge
  version: '0.1'
  contact:
    email: dreuse@dreuse.dev | alfoltran@gmail.com
    name: dreuse | alfoltran
servers:
  - url: https://api.cardsofkeyforge.com

x-amazon-apigateway-request-validators:
  basic:
    validateRequestBody: true
    validateRequestParameters: true
  params-only:
    validateRequestBody: false
    validateRequestParameters: true

x-amazon-apigateway-request-validator: basic

paths:
  /cards:
    get:
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCards.Arn}/invocations
        connectionType: INTERNET
        passthroughBehavior: NEVER
        httpMethod: POST
      summary: Get all cards or filter through attributes.
      tags:
        - cards
      parameters:
        - in: header
          name: Lang
          required: false
          description: the desired language for the cards defaults to pt
          schema:
            default: pt
            type: string
        - in: header
          name: traceparent
          required: false
          description: identifier for distributed tracing purposes
          schema:
            type: string
        - in: query
          name: set
          description: set short name
          required: false
          schema:
            enum:
              - aoa
              - cota
              - dt
              - mm
              - wc
        - in: query
          name: amber
          description: search cards with number of ambers equal or greater than
          required: false
          schema:
            type: integer
        - in: query
          name: name
          description: card's full or partial name
          required: false
          schema:
            type: string
        - in: query
          name: type
          description: card type
          required: false
          schema:
            enum:
              - action
              - artifact
              - creature
              - upgrade
              - the_tide
        - in: query
          name: house
          description: card's house
          required: false
          schema:
            enum:
              - brobnar
              - dis
              - logos
              - mars
              - sanctum
              - saurian
              - shadows
              - star_alliance
              - untamed
              - unfathomable
        - in: query
          name: anomaly
          description: if card is anomaly
          required: false
          schema:
            type: boolean
        - in: query
          name: maverick
          description: if card is maverick
          required: false
          schema:
            type: boolean
        - in: query
          name: rarity
          description: card rarity
          required: false
          schema:
            enum:
              - common
              - uncommon
              - rare
              - variant
        - in: query
          name: power
          description: search cards with power equal or greater than some value
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Card'
        '400':
          description: Bad request

#  /cards/{id}:
#    get:
#      x-amazon-apigateway-integration:
#        type: mock
#        uri:
#          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCards.Arn}/invocations
#        connectionType: INTERNET
#        passthroughBehavior: NEVER
#        httpMethod: POST
#      summary: get a single card by id
#      tags:
#        - cards
#      parameters:
#        - in: header
#          name: Lang
#          required: false
#          description: the desired language for the cards defaults to pt
#          schema:
#            type: string
#        - in: header
#          name: traceparent
#          required: false
#          description: identifier for distributed tracing purposes
#          schema:
#            type: string
#        - in: path
#          name: id
#          description: card id
#          required: true
#          schema:
#            type: string
#      responses:
#        '200':
#          description: OK
#          content:
#            application/json:
#              schema:
#                  $ref: '#/components/schemas/Card'
#        '404':
#          description: Not found
#  /sets:
#    get:
#      x-amazon-apigateway-integration:
#        type: mock
#        uri:
#          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCards.Arn}/invocations
#        connectionType: INTERNET
#        passthroughBehavior: NEVER
#        httpMethod: POST
#      summary: Returns all sets.
#      tags:
#        - cards
#      parameters:
#        - in: path
#          description: "set short name (ex: cota)"
#          name: set
#          required: false
#      responses:
#        '200':
#          description: OK
#          content:
#            application/json:
#              schema:
#                type: array
#                items:
#                  $ref: '#/components/schemas/Set'
#  /sets/{set}:
#    get:
#      x-amazon-apigateway-integration:
#        type: mock
#        uri:
#          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCards.Arn}/invocations
#        connectionType: INTERNET
#        passthroughBehavior: NEVER
#        httpMethod: POST
#      summary: Returns a set.
#      tags:
#        - cards
#      parameters:
#        - in: path
#          name: set
#          description: "set short name (ex: cota)"
#          required: false
#      responses:
#        '200':
#          description: OK
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Card'
components:
  schemas:
    Source:
      type: object
      properties:
        type:
          type: string
        version:
          type: string
        url:
          type: string
    Rules:
      type: object
      properties:
        title:
          type: string
        text:
          type: string
        source:
          $ref: '#/components/schemas/Source'
    House:
      type: object
      properties:
        id:
          type: string
        house:
          type: string
        normal:
          type: string
        zoom:
          type: string
    Card:
      type: object
      properties:
        card_title:
          type: string
        set:
          type: string
        amber:
          type: integer
        card_number:
          type: string
        card_text:
          type: string
        card_type:
          type: string
        expansion:
          type: integer
        flavor_text:
          type: string
        houses:
          type: array
          items:
            $ref: '#/components/schemas/House'
        is_anomaly:
          type: boolean
        is_maverick:
          type: boolean
        power:
          type: string
        rarity:
          type: string
        traits:
          type: string
        errata:
          type: string
        rules:
          type: array
          items:
            $ref: '#/components/schemas/Rules'
    SetHouse:
      type: object
      properties:
        name:
          type: string
        icon:
          type: string
    Map:
      type: object
      additionalProperties:
        type: string
    Set:
      type: object
      properties:
        sequence:
          type: string
        longname:
          type: string
        code:
          type: integer
        developers:
          type: array
          items:
            type: string
        release:
          type: string
        new_count:
          type: integer
        name:
          type: string
        icon:
          type: string
        houses:
          type: array
          items:
            $ref: '#/components/schemas/SetHouse'
        langs:
          type: object
          items:
            $ref: '#/components/schemas/Map'
        designer:
          type: string
        card_count:
          type: integer





